
;(function($){
	var wst	= $(window).scrollTop(),
		wh	= $(window).height(),
		ww	= $(window).width();

	$(window).scroll(function(){
		wst	= $(window).scrollTop();
	});


	$.fn.extend({
		loading : function(options){
			var defaults = {
				hideTime: 3000,
				overTime: 120000,
				unit: true,
				loaded: function(){}
			};
			var settings = $.extend({}, defaults, options);
			this.each(function(){
				var _this = $(this),
					time = null,
					loadingValue = 0,

					loaded = function(){
						clearTimeout(time);
						_this.fadeOut(settings.hideTime, settings.loaded);
					},

					progress = function(){
						if(settings.unit){
							_this.find('.loading-txt').html(parseInt(loadingValue) + '%');
						}else{
							_this.find('.loading-txt').html(parseInt(loadingValue));
						}
					},

					backLoadingValue = function(){
						if(imgArray.length){
							loadingValue += (100 / imgArray.length);
						}else{
							loadingValue = 100;
						}
						progress();
						if(loadingValue >= 100 || loadingValue >= 99.9){
							loadingValue = 100;
							progress();
							loaded();
						}
					},

					imgArray = function(){
						var ay = [];
						$('body img').each(function(){
							ay.push($(this).attr('src'));
						});
						$('body .img-bg').each(function(){
							var bgSrc = $(this).css('background-image');
							if(bgSrc != 'none'){
								var re = /url\((.*)\)/;
								bgSrc = re.exec(bgSrc);
								ay.push(bgSrc[1].replace(/\"/g,''));
							}
						});
						return ay;
					},

					isLoad = function() {
						if (imgArray.length) {
							for (var i = 0; i < imgArray.length; i++) {
								var imgs = new Image();
								imgs.src = imgArray[i];
								if (imgs.complete) {
									backLoadingValue();
								} else {
									imgs.onload = function () {
										backLoadingValue();
									};
									imgs.onerror = function () {
										backLoadingValue();
									};
								}
							}
						} else {
							backLoadingValue();
						}
					};

				imgArray();
				isLoad();
				time = setTimeout(loaded, settings.overTime);
				window.onload = loaded;
			});
		},

		scrollActive : function(options){
			var defaults = {
				top: 30,
				className: 'active'
			};
			var settings = $.extend({}, defaults, options);
			this.each(function(){
				var _this = $(this);
				$(window).scroll(function(){
					if(wst > settings.top){
						_this.addClass(settings.className);
					}else{
						_this.removeClass(settings.className);
					}
				});
			});
			return this;
		},

		scrollTo : function(options){
			var defaults = {
				position: 0,
				speed : 3000
			}
			var settings = $.extend({}, defaults, options);
			this.each(function(){
				var _this = $(this);
				_this.bind('click', function(){
					$('body, html').stop(true).animate({
						'scrollTop' : settings.position
					}, settings.speed);
				});
			});
			return this;
		},

		star : function(){
			this.each(function(){
				var _this = $(this);
				var _thisIndex = -1;
				var changeStar = function(index){
					$(this).find('i').removeClass('fa-star').addClass('fa-star-o');
					for(var i=0; i<=index; i++){
						$(this).find('i').eq(i).removeClass('fa-star-o').addClass('fa-star');
					}
				}
				_this.find('i').each(function(index){
					var index = index;
					$(this).bind('click', function(){
						_thisIndex = index;
						_this.find('input').val(_thisIndex+1);
						changeStar.call(_this, index);
					});
					$(this).bind('mouseenter', function(){
						changeStar.call(_this, index);
					});
					$(this).bind('mouseleave', function(){
						changeStar.call(_this, _thisIndex);
					});
				});
			});
			return this;
		}
	});
})(jQuery);

$(function(){

	$('.loading').loading();
	$('.header').scrollActive();
	$('.star').star();
	$('.backTop').scrollTo({
		position : 0
	});
	$('.scroll-down').scrollTo({
		position : $(window).height()
	});


});;// Alert 弹窗
function AlertPop(options) {
    var self = this;
    var defaults = {
        theme: 'theme-default',
        title: '<span class="fs-16">操作</span>',
        content: '<article class="fs-14">操作提示</article>',
        closeBtn : true,
        closeBtnHtml : '<span class="close"><i></i><i></i></span>',
        status: 'warning',
        statusSize: '30',
        statusHtml : {
            'warning' : '<i class="fa fa-exclamation-circle color-warning"></i>',
            'question' : '<i class="fa fa-question-circle color-info"></i>',
            'success' : '<i class="fa fa-check-circle color-success"></i>',
            'fail' : '<i class="fa fa-times-circle color-danger"></i>',
        },
        btns : [
            // node, [name, href, target], isClose, callback
            ['div.button.button-md.button-warning', ['No'], true, null],
            ['div.button.button-md.button-primary', ['Yes'], true, null]
        ],
        hide: false
    };
    this.ele = {};
    this.settings = $.extend({}, defaults, options);
    this.init();
    return this;
}
AlertPop.prototype = {
    statusCur: function(status){
        var self = this;
        for(var i in self.settings.statusHtml){
            if(i == status) {
                return self.settings.statusHtml[status];
            }
        }
    },
    nodeSplit: function(str){
        var ay = str.split('.'),
            nodeName = ay[0],
            className = '';
        if(ay.length > 1){
            for(var j=1; j<=ay.length-1; j++){
                className += className+' '+ay[j];
            }
        }
        return {
            nodeName : nodeName,
            className : className
        };
    },
    init: function(){
        var self = this;
        self.ele.alertPopMask = $('<div class="alert-pop-mask '+ self.settings.theme +'-alert-pop-mask"></div>');
        self.ele.alertPopClose = $('<div class="alert-pop-close '+ self.settings.theme +'-alert-pop-close">'+ self.settings.closeBtnHtml +'</div>');
        self.ele.alertPopHtml = '';

        if(self.settings.title != false || self.settings.title != ''){
            self.ele.alertPopHtml += '<div class="alert-pop-title">'+ self.settings.title +'</div>';
        }
        if(self.settings.status != false || self.settings.status != ''){
            self.ele.alertPopHtml += '<span class="status" style="font-size:'+ self.settings.statusSize +'px">'+ self.statusCur(self.settings.status) +'</span>';
        }
        if(self.settings.content != false || self.settings.content != ''){
            self.ele.alertPopHtml += '<div class="alert-pop-content">'+ self.settings.title +'</div>';
        }
        if(self.settings.btns != false || self.settings.btns != '' || self.settings.btns.length > 0){
            self.ele.alertPopHtml += '<div class="alert-pop-btns clearfix"></div>';
        }
        self.ele.alertPopHtml = $('<div class="alert-pop '+ self.settings.theme +'-alert-pop"><div class="alert-pop-wrapper">'+ self.ele.alertPopHtml +'</div></div>');
        for(var i=0; i<= self.settings.btns.length-1; i++) {
            var btnNode = self.settings.btns[i][0],
                btnInfo = self.settings.btns[i][1],
                btnClose = self.settings.btns[i][2],
                btnCallBack = self.settings.btns[i][3];

            var nodeName = self.nodeSplit(btnNode).nodeName,
                className = self.nodeSplit(btnNode).className;

            var btnHtml = '';
            if(nodeName == 'a') {
                var href = btnInfo[1],
                    target = btnInfo[2];
                if(href == '' || href == null || href == undefined) {
                    btnHtml = $('<a class="alert-pop-btn '+ className +'" style="width:'+ (100 / self.settings.btns.length) +'%">'+ btnInfo[0] +'</a>');
                }else{
                    btnHtml = $('<a href="" class="alert-pop-btn '+ className +'" style="width:'+ (100 / self.settings.btns.length) +'%">'+ btnInfo[0] +'</a>');
                }
            }else if(nodeName == 'div'){
                btnHtml = $('<div class="alert-pop-btn '+ className +'" style="width:'+ (100 / self.settings.btns.length) +'%">'+ btnInfo[0] +'</div>');
            }
            self.ele.alertPopHtml.find('.alert-pop-btns').append(btnHtml);
        };

        if(self.settings.closeBtn){
            $('body').append(self.ele.alertPopMask).append(self.ele.alertPopClose).append(self.ele.alertPopHtml);
        }else{
            $('body').append(self.ele.alertPopMask).append(self.ele.alertPopHtml);
        }

        self.events();
        self.btnEvents(self.settings.btns);
        self.hideAuto();
    },
    hideAuto: function(){
        var self = this;
        if(self.settings.hide != false || self.settings.hide != ''){
            setTimeout(function(){
                self.destory();
            }, self.settings.hide);
        }
    },
    btnEvents: function(btns){
        var self = this;
        var btnFn = function(i){
            self.ele.alertPopHtml.find('.alert-pop-btn').eq(i).bind('click', function(){
                if(btns[i][3] != null) {
                    btns[i][3](self);
                }
                if(btns[i][2]){
                    self.destory();
                }
                return false;
            });
        }
        for(var i=0; i<= btns.length-1; i++) {
            btnFn(i);
        }
    },
    events: function(){
        var self = this;
        self.ele.alertPopMask.bind('click', function(){
            self.destory();
        });
        self.ele.alertPopClose.bind('click', function(){
            self.destory();
        });
    },
    destory: function(){
        var self = this;
        $(self.ele.alertPopMask).fadeOut(function(){
            $(self.ele.alertPopMask).remove();
        });
        $(self.ele.alertPopClose).fadeOut(function(){
            $(self.ele.alertPopClose).remove();
        });
        $(self.ele.alertPopHtml).fadeOut(function(){
            $(self.ele.alertPopHtml).remove();
        });
    }
}
;// loadingPop
function LoadPop(options) {
    var self = this;
    var defaults = {
        theme: 'pop-load-default',
        content: '加载中……',
        position: 'top',
        hide: false,
        wrapper: 'body',
        animateIn: 'fadeIn',
        animateOut: 'fadeOut',
        callback: false
    };
    this.settings = $.extend({}, defaults, options);
    this.ele = {};
    this.init();
    return this;
}
LoadPop.prototype = {
    init: function(){
        var self = this;
        var className = self.settings.theme +' pop-load'+ self.settings.status;
        if(self.settings.wrapper != 'body'){
            className += ' no-body';
        }
        self.ele.loadPop = $('<div class="pop-load '+ self.settings.theme +'"><div class="pop-load-box">'+ self.settings.content +'</div></div>');

        $(self.settings.wrapper).append(self.ele.loadPop);
        self.hide();
        if(self.settings.callback != '' && self.settings.callback != false && self.settings.callback != 'none'){
            self.settings.callback(self);
        }
    },
    hide: function(){
        var self = this;
        if(self.settings.hide != '' && self.settings.hide != false && self.settings.hide != 'none'){
            setTimeout(function(){
                $(self.ele.loadPop).fadeOut(function(){
                    $(self.ele.loadPop).remove();
                });
            }, self.settings.hide);
        }
    }
}
;// tipPop
function TipPop(options) {
    var self = this;
    var defaults = {
        content: '可手动关闭弹窗',
        place: false,
        position: 'top',
        closed: true,
        closedHtml: '<span class="tip-close button button-circle button-sm button-success"><i class="fa fa-times"></i></span>',
        rounded: false,
        hide: false,
        animateIn: 'bounce',
        animateOut: 'fadeOutUp',
        status: 'success',
        statusSize: '30',
        statusHtml : {
            'warning' : ['<i class="fa fa-exclamation-circle mr10"></i>', '<span class="tip-close button button-circle button-sm button-success"><i class="fa fa-times"></i></span>'],
            'info' : ['<i class="fa fa-question-circle mr10"></i>', '<span class="tip-close button button-circle button-sm button-success"><i class="fa fa-times"></i></span>'],
            'success' : ['<i class="fa fa-check-circle mr10"></i>', '<span class="tip-close button button-circle button-sm button-success"><i class="fa fa-times"></i></span>'],
            'danger' : ['<i class="fa fa-times-circle mr10"></i>', '<span class="tip-close button button-circle button-sm button-danger"><i class="fa fa-times"></i></span>'],
            'primary' : ['<i class="fa fa-times-circle mr10"></i>', '<span class="tip-close button button-circle button-sm button-primary"><i class="fa fa-times"></i></span>']
        }
    };
    this.settings = $.extend({}, defaults, options);
    this.init();
    return this;
}
TipPop.prototype = {
    init: function(){
        var self = this;
        var tipClass = '';
        if(self.settings.rounded != 'none' || self.settings.rounded != false || self.settings.rounded != ''){
            tipClass += 'tip-'+self.settings.rounded + ' ';
        }
        if(self.settings.status != 'none'){
            tipClass += 'tip-'+self.settings.status + ' ';
        }
        if(self.settings.closed){
            self.tipPopHtml = $('<div class="tip-box clearfix '+ tipClass +'"><span class="tip-status">'+ self.settings.statusHtml[self.settings.status] +'</span>'+ self.settings.content + self.settings.closedHtml +'</div>');
        }else{
            self.tipPopHtml = $('<div class="tip-box clearfix '+ tipClass +'"><span class="tip-status">'+ self.settings.statusHtml[self.settings.status] +'</span>'+ self.settings.content +'</div>');
        }
        if(self.settings.position != '' || self.settings.place != 'none' || self.settings.place != false){
            self.tipPopHtml.css({
                'position': 'fixed',
                'left': '0',
                'right': '0'
            });
            if(self.settings.position == 'top') {
                self.tipPopHtml.css({
                    'top': '0'
                });
            }else if(self.settings.position == 'center') {
                self.tipPopHtml.css({
                    'top': '50%'
                });
            }else if(self.settings.position == 'bottom') {
                self.tipPopHtml.css({
                    'bottom': '0'
                });
            }
        }

        if(self.settings.animateIn != '' || self.settings.animateIn != 'none' || self.settings.animateIn != false){
            self.tipPopHtml.addClass('animated '+self.settings.animateIn)
        }

        if(self.settings.place == '' || self.settings.place == 'none' || self.settings.place == false){
            $('body').append(self.tipPopHtml);
        }else{
            $(self.settings.place).append(self.tipPopHtml);
        }

        self.events();
        self.hideAuto();
    },
    hideAuto: function(){
        var self = this;
        if(self.settings.hide != false) {
            setTimeout(function(){
                self.destory();
            }, self.settings.hide);
        }
    },
    events: function(){
        var self = this;
        self.tipPopHtml.find('.tip-close').bind('click', function(){
            self.destory();
        });
    },
    destory: function(){
        var self = this;
        if(self.settings.animateIn == '' || self.settings.animateIn == 'none' || self.settings.animateIn == false){
            self.tipPopHtml.remove();
        }
        else {
            self.tipPopHtml.removeClass(self.settings.animateIn).addClass(self.settings.animateOut);
            setTimeout(function(){
                self.tipPopHtml.remove();
            }, 1000);
        }
    }
}
;
function Toast(options) {
    var self = this;
    var defaults = {
        theme: 'toast-default',
        wrapper: 'body',
        hide: '2000',
        status: 'success',
        statusHtml: {
            'success' : '<i class="fa fa-check"></i><p>已完成</p>',
            'failed' : '<i class="fa fa-check"></i><p>失败</p>',
            'loading' : '<i class="fa fa-circle-spinner fa-spin"></i><p>数据加载中……</p>',
        }
    }
    this.ele = {};
    this.settings = $.extend({}, defaults, options);
    this.init();
    return this;
}
Toast.prototype = {
    init: function(){
        var self = this;
        var className = self.settings.theme +' toast'+ self.settings.status;
        if(self.settings.wrapper != 'body'){
            className += ' no-body';
        }
        self.ele.toast = $('<div class="'+ className +'" style="display:none;">'+ self.settings.statusHtml[self.settings.status] +'</div>');
        $(self.settings.wrapper).append(self.ele.toast);
        $(self.ele.toast).fadeIn(function(){
            self.events();
        });
    },
    events: function(){
        var self = this;
        if(typeof self.settings.callback === 'function') {
            self.settings.callback(self);
        }else{
            self.hide();
        }
    },
    hide: function(){
        var self = this;
        setTimeout(function(){
            $(self.ele.toast).fadeOut(function(){
                $(this).remove()
            });
        }, self.settings.hide);
    }
}
;/*
 * legend common plugin
 * Author: lijundong
 */

function Legend() {
  return this;
}
Legend.prototype.init = function(){
    this.tipClose();
    this.pop.init();
}


Legend.prototype.setCookie = function(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
};
Legend.prototype.getCookie = function(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
    }
    return "";
};
Legend.prototype.delCookie = function(name) {
    this.setCookie(name, "", -1);
};


Legend.prototype.pop = {
    size : function(){
        $('.com-pop').css({
            height: 'auto'
        });
        var h = $('.com-pop').outerHeight(true);
        if(h > $(window).height()){
            h = $(window).height();
        }
        if(h % 2 !== 0){
            $('.com-pop').css({
                height: h+1
            })
        }
    },
    close : function(){
        $('.com-pop, .com-pop-mask').fadeOut();
    },
    open : function(ele){
        var _this = this;
        if(ele != ''){
            $('.change-'+ ele).show().siblings().hide();
        }else{
            $('.change-name').eq(0).show().siblings().hide();
        }
        $('.com-pop, .com-pop-mask').fadeIn(function(){
            _this.size();
        });
    },
    init: function(){
        var _this = $(this);
        $('.com-pop-close, .com-pop-mask').bind('click', function(){
            _this.close();
        });
    }
};


Legend.prototype.alertPop = function(options){
    var alertPop = new AlertPop(options);
    return alertPop;
};


Legend.prototype.loadPop = function(options){
    var loadPop = new LoadPop(options);
    return loadPop;
}


Legend.prototype.tipPop = function(options){
    var tipPop = new TipPop(options);
    return tipPop;
}


Legend.prototype.toastPop = function(options){
    var toast = new Toast(options);
    return toast;
}


Legend.prototype.evenHeight = function(ele){
    $(ele).outerHeight('auto');
    var h = $(ele).outerHeight();
    if(h >= $(window).height()){
        $(ele).outerHeight($(window).height());
    }
    if(h % 2 != 0){
        $(ele).outerHeight(h+1);
    }
}


Legend.prototype.tipClose = function(options){
    var defaults = {
        animateIn: 'fadeIn',
        animateOut: 'fadeOut'
    };
    var settings = $.extend({}, defaults, options);
    $('body .tip-close').each(function(){
        $(this).bind('click', function(){
            $(this).parent().removeClass(settings.animateIn).addClass(settings.animateOut);
            setTimeout(function(){
                $(this).parent().remove();
            }, 1000);
        });
    });
};


;(function($){
    window.legend = new Legend();
    var time = null;
    $(window).resize(function(){
        clearTimeout(time);
        time = setTimeout(function(){
        legend.pop.size();
        });
    });
})(jQuery);
;// 菜单固定，页面滚动
$(function(){
	if($('.index-step').length){
		// anchor-hd 要写 data-anchor="anchor-name"
		// anchor-bd 要写 id="anchor-name"
		var anchorHd = $('.index-pagination'),
			anchorHdItem = $('.index-pagination .anchor-hd'),
			anchorBd = $('.index-step'),
			anchorBdItem = $('.index-step .anchor-bd');

		var hDetailMenu = function(){
			if($(window).scrollTop() > anchorBd.offset().top){
				anchorHd.addClass('active');
			}else{
				anchorHd.removeClass('active');
			}
		};
		var hDetailMenuBd = function(){
			var len = anchorBdItem.length;
			for(var i=len; i>0; i--){
				var $this = anchorBdItem.eq(i-1),
					$id = $this.attr('id');
				if($this.offset().top <= $(window).scrollTop() + $(window).height() / 2){
					anchorHdItem.each(function(){
						var $this = $(this);
						if ($this.attr('data-anchor') == $id){
							if($this.addClass('active').parent('li').length){
								$this.addClass('active').parent().siblings().find('.anchor-hd').removeClass('active');
							}else{
								$this.addClass('active').siblings().removeClass('active');
							}
						}
					});
					break;
				}
			}
		};

		anchorHdItem.each(function(){
			var $this = $(this);
			$this.bind('click', function(){
				var $id = $this.attr('data-anchor');
				closeMenu();
				$('body, html').stop(true).animate({
					scrollTop : $('#'+$id).offset().top - $('.header').outerHeight(true) + 2
				});
			});
		});
		//hDetailMenu();
		hDetailMenuBd();
		$(window).scroll(function(){
			if(anchorBd.length) {
				//hDetailMenu();
				hDetailMenuBd();
			}
		});
	}
});




// 创建手机版导航
// css样式
// .mobile-side-btn {
// 	position: absolute;
// 	right: 0;
// 	top: 50%;
// 	color: #fff;
// 	cursor: pointer;
// 	@include px($FS30);
// 	@include translate(0, -50%);
// }
// .mobile-side {
// 	position: fixed;
// 	top: 0;
// 	left: 0;
// 	bottom: 0;
// 	right: 20%;
// 	z-index: 9;
// 	background-color: $color-3;
// 	box-shadow: $shadow1;
// 	@include px($FS20);
// 	@include translate(-100%, 0);
// 	@include transition(all 0.5s ease-in-out);
// 	&.active {
// 		@include translate(0, 0);
// 	}
// 	.mobile-nav {
// 		li {
// 			a {
// 				display: block;
// 				padding: 0.5em 1em;
// 				line-height: 1.2em;
// 				color: #fff;
// 				border-bottom: 1px solid darken($color-3, 4);
// 				@at-root .no-touch &:hover,
// 				&.active {
// 					color: #fff;
// 					background: darken($color-3, 7);
// 				}
// 			}
// 		}
// 	}
// }


/*

var bodyScrollTop = 0;
var isHasSide = false;
var createSide = function(ele){
	isHasSide = true;
	var mobileNav = $('<nav class="mobile-nav clearfix">'+ $('.nav').html() +'</nav>');
	var mobileSide = $('<div class="mobile-side clearfix"></div>').append(mobileNav);
	var mobileSideBtn = $('<div class="mobile-side-btn"><i class="fa fa-navicon"></i></div>');
	$('body').append(mobileSide);
	$('.header .wrapper').append(mobileSideBtn);

	mobileSideBtn.bind('click', function(){
		if(mobileSide.hasClass('active')){
			closeNav();
		}else{
			openNav();
		}
	});
};
var removeSide = function(){
	$('.mobile-side-btn').unbind('click');
	$('.mobile-side, .mobile-side-btn').remove();
	isHasSide = false;
};
var openNav = function(){
	bodyScrollTop = $(window).scrollTop();
	$('body, html').css({
		'overflow' : 'hidden'
	});
	$('.container').addClass('mobile-side-active');
	$('.mobile-side').addClass('active');
	$('.mobile-side-btn').find('.fa').removeClass('fa-navicon').addClass('fa-close');
};
var closeNav = function(){
	$(window).scrollTop(bodyScrollTop);
	$('body, html').css({
		'overflow' : 'auto',
		'overflow-x' : 'hidden'
	});
	if(isHasSide){
		$('.container').removeClass('mobile-side-active');
		$('.mobile-side').removeClass('active');
		$('.mobile-side-btn').find('.fa').removeClass('fa-close').addClass('fa-navicon');
	}
};
var sideIsCreate = function(){
	if($(window).width() <= 980 && !isHasSide){
		createSide();
	}else if($(window).width() > 980 && isHasSide){
		closeNav();
		removeSide();
	}
};
sideIsCreate();

$(window).resize(function(){
	sideIsCreate();
});
*/



// 弹窗
// html代码
// <section class="com-pop-mask"></section>
// <section class="com-pop-close"></section>
// <section class="com-pop">
// 	<div class="pop-wrapper">
// 		<div class="change-name change-rentalAppraisal">
// 		</div>
// 	</div>
// </section>




// 读取 xml
function loadXmlFile(xmlFile){
	var xmlDom = null;
	if (window.ActiveXObject){
		xmlDom = new ActiveXObject("Microsoft.XMLDOM");
		xmlDom.loadXML(xmlFile);//如果用的是XML字符串
		//xmlDom.load(xmlFile);//如果用的是xml文件。
	}else if (document.implementation && document.implementation.createDocument){
		var xmlhttp = new window.XMLHttpRequest();
		xmlhttp.open("GET", xmlFile, false);
		xmlhttp.send(null);
		xmlDom = xmlhttp.responseXML;
	}else{
		xmlDom = null;
	}
	return xmlDom;
}
// 获取 xml 节点内容
// var getXmlNode = function(){
// 	var xml = loadXmlFile('http://twitrss.me/twitter_user_to_rss/?user=dysinpartners');
// 	var twitterRss_article = twitterRss.getElementsByTagName('item');
// 	var matches1 = twitterRss_description.match(/lang="en">(.*)<a/i)[1];
// 	var matches2 = twitterRss_description.match(/src="([^'"]+)"/i)[1];
// 	var matches3 = twitterRss_description.match(/href="([^'"]+)"/i)[1];
// }







;(function($){
	var wst	= $(window).scrollTop(),
		wh	= $(window).height(),
		ww	= $(window).width();

	$(window).scroll(function(){
		wst	= $(window).scrollTop();
	});


	$.fn.extend({
		// 依赖 perfect-scrollbar 插件
		scrollBar : function(){
			this.each(function(){
				var _this = $(this);
				_this.perfectScrollbar();
				var time = null;
				$(window).resize(function(){
					clearTimeout(time);
					time = setTimeout(function(){
						_this.perfectScrollbar('update');
					}, 300);
				});
			});
			return this;
		}
	});
	$('.scroll-bd').scrollBar();
})(jQuery);





$(function(){
	$(function(){
		//对所有的计时器进行处理
		var timers=$(".timer-simple-seconds");
		for(var i=0;i<timers.length;i++){
			var timer=$(timers[i]);

			if(timer.attr("timestamp")){
				//如果是时间戳，则预处理一下时间为倒计时秒数
				prepareProcessTimestamp2Timer(timer);
			}else if(timer.attr("datetime")){
				//处理时间格式为倒计时秒数
				prepareProcessDatetime2Timer(timer);
			}
			//先调用一次，避免误差
			processTimer(timer);
			setInterval(processTimer,1000,timer);
		}

		/**
		 * doWhat: 这个函数将时间戳预处理成统一的倒计时描述
		 *
		 * 对时间做一个预处理，因为如果服务器直接返回剩余的描述的话从服务器相应到客户端虽然短到几百毫秒但总是会有偏差的，这样子不太好
		 * 所以服务器只需要设置一个时间戳表示到哪里停止就可以了
		 */
		function prepareProcessTimestamp2Timer(timer){
			var total=parseInt(timer.attr("timestamp"));
			total=Math.round(total/1000);
			var now=new Date().getTime()/1000;
			timer.attr("timer",total-now);
		}

		/**
		 * 将日期时间格式转为倒计时格式
		 */
		function prepareProcessDatetime2Timer(timer){
			var timestamp=new Date(timer.attr("datetime")).getTime();
			timer.attr("timestamp",timestamp);
			prepareProcessTimestamp2Timer(timer);
		}

		/**
		 * 倒计时，滴答滴答...
		 * @param {Object} timer
		 */
		function processTimer(timer){
			var total=parseInt(timer.attr("timer"));
			var t=total;

			//倒计时不能为负
			if(total<0) return; //TODO 后续版本加上计时完毕可以回调函数

			//找到显示时间的元素
			var day=timer.find(".day");
			var hour=timer.find(".hour");
			var minute=timer.find(".minute");
			var second=timer.find(".second");

			//刷新计时器显示的值
			if(day.length){
				var d=Math.floor(t/(60*60*24));
				day.text(d);
				t-=d*(60*60*24);
			}
			if(hour.length){
				var h=Math.floor(t/(60*60));
				hour.text((h<10?"0":"")+h);
				t-=h*(60*60);
			}
			if(minute.length){
				var m=Math.floor(t/60);
				minute.text((m<10?"0":"")+m);
				t-=m*60;
			}
			if(second.length){
				second.text((t<10?"0":"")+t);
			}

			//一秒过去了...
			total--;
			timer.attr("timer",total);
		}

	});
});;;$(function(){
	if(device.landscape() && $(window).width() <= 768){
		$('.section-1').height($(window).height() * 1.4);
		$('.section-2').height($(window).height() * 1.4);
	}else{
		$('.section-1').height($(window).height());
		$('.section-2').height($(window).height());
	}
	//$('.section-3').height($(window).height() / 2);

	$(window).resize(function(){
		if(device.landscape() && $(window).width() <= 768){
			$('.section-1').height($(window).height() * 1.4);
			$('.section-2').height($(window).height() * 1.4);
		}else{
			$('.section-1').height($(window).height());
			$('.section-2').height($(window).height());
		}
	});




	$('.lang span').bind('click', function(e){
		e.stopPropagation();
		$('.lang').addClass('active2');
	});
	$('body').bind('click', function(){
		$('.lang').removeClass('active2');
	});

	$('.video-play').bind('click', function(){
		$('.videoPop').show();
	});
	$('.videoPop-mask, .videoPop-close').bind('click', function(){
		$('.videoPop').hide();
	});
});

function closeMenu(){
	$('.header').removeClass('active-menu');
	$('.menu-btn').removeClass('active');
	$('.menu-list2').removeClass('active');
}
function openMenu(){
	$('.header').addClass('active-menu');
	$('.menu-btn').addClass('active');
	$('.menu-list2').addClass('active');
}

$(window).load(function(){
	if(!device.android() && !device.ios()){
		var s = skrollr.init({
			forceHeight: false,
			mobileCheck: function() {
				//hack - forces mobile version to be off
				return false;
			}
		});
		if (s.isMobile()) {
			s.destroy();
		}
	}else{
		$('#skrollr-body').height('auto');
	}
});

;$(function(){
	var bli = 1;
	var bli2 = 1;
	if(device.mobile()){
		bli = 6;
		bli2 = 2;
	}
	//if(device.android()){
	//	$('.earth-canvas').hide();
	//}
	//if(!device.android()){
	// if(true){
	// couple of constants
	var POS_X = 1800;
	var POS_Y = 500;
	var POS_Z = 1800;
	var WIDTH = $(window).width();
	var HEIGHT = $(window).height();

	var FOV = 45;
	var NEAR = 1;
	var FAR = 4000;

	// some global variables and initialization code
	// simple basic renderer
	var renderer = new THREE.WebGLRenderer({
		alpha: true,
		antialias: true
	});
	renderer.setSize(WIDTH,HEIGHT);
	renderer.setClearColor(0xFFFFFF, 0);

	// add it to the target element
    var mapDiv = document.getElementById("particles2");
    mapDiv ? mapDiv.appendChild(renderer.domElement) : null;

	// setup a camera that points to the center
	var camera = new THREE.PerspectiveCamera(FOV,WIDTH/HEIGHT,NEAR,FAR);
	camera.position.set(POS_X,POS_Y, POS_Z);
	camera.lookAt(new THREE.Vector3(0,0,0));

	// create a basic scene and add the camera
	var scene = new THREE.Scene();
	// scene.add(camera);

    if (navigator.userAgent.indexOf("Chrome") === -1) {
        setTimeout(function () {
            renderEarth();
        }, 500);
    } else {
        renderEarth();
    }
	// we wait until the document is loaded before loading the
    // density data.
    function renderEarth() {
        $(document).ready(function () {
            // history
            // jQuery.get('assets/data/density.json', function(data) {
            //     addDensity(data);
            //     // addLights();
            //     // addEarth();
            //     render();
            // });

            var loader = new THREE.ObjectLoader();
            loader.load(
                // resource URL
                // "assets/data/earthMeshData.json",
                "assets/data/earthScene.json",

                // onLoad callback
                // Here the loaded data is assumed to be an object
                function (obj) {
                    // Add the loaded object to the scene
                    scene.add(obj);
                    render();
                },

                // onProgress callback
                function (xhr) {
                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');
                },

                // onError callback
                function (err) {
                    console.error('An error happened');
                }
            );
        });
    }

	// simple function that converts the density data to the markers on screen
	// the height of each marker is relative to the density.

	// function addDensity(data) {
	// 	// the geometry that will contain all our cubes
 //        var geom = new THREE.Geometry();
	// 	// material to use for each of our elements. Could use a set of materials to
	// 	// add colors relative to the density. Not done here.
	// 	var cubeMat = new THREE.MeshBasicMaterial({color: 0xffffff});
	// 	var cubeMat3 = new THREE.MeshBasicMaterial({color: 0xffffff, opacity: 0.6});
	// 	for (var i = 0 , j = data.length-1; i < j ; i++) {
	// 		//get the data, and set the offset, we need to do this since the x,y coordinates
	// 		//from the data aren't in the correct format
 //            var value = data[i].value;
	// 		// calculate the position where we need to start the cube
 //            var position = data[i].position;
 //            var position2 = data[i].position2;
	// 		// create the cube
 //            var cube2 = new THREE.Mesh(new THREE.BoxGeometry(bli2, bli2, bli2, 1, 1, 1),cubeMat);
	// 		cube2.position.set(position2[0], position2[1], position2[2]);
	// 		cube2.lookAt( new THREE.Vector3(0,0,0) );
	// 		geom.mergeMesh(cube2);

	// 		if( 1 + value / 60 * bli2 >= 8 * bli2){
 //                var cube = new THREE.Mesh(new THREE.BoxGeometry(bli2, bli2, 1 + value / 60 * bli2, 1, 1, 1),cubeMat3);
 //                cube.position.set(position[0], position[1], position[2]);
	// 			cube.lookAt( new THREE.Vector3(0,0,0) );

	// 			var spGeo = new THREE.SphereGeometry(3 * bli2, 3 * bli2, 3 * bli2);
	// 			var mat2 =  new THREE.MeshBasicMaterial( {color: 0xffffff} );
	// 			var sp = new THREE.Mesh(spGeo, mat2);
	// 			sp.position.set(position2[0], position2[1], position2[2]); // = position2;
	// 			sp.lookAt( new THREE.Vector3(0,0,0) );
	// 			scene.add(sp);

	// 			geom.mergeMesh(cube);
	// 		}
	// 	}

	// 	// create a new mesh, containing all the other meshes.
 //        // var total = new THREE.Mesh(geom, new THREE.MeshFaceMaterial());
 //        var total = new THREE.Mesh(geom, new THREE.MeshBasicMaterial( {color: 0xffffff} ));
 //        // console.log(JSON.stringify(total.toJSON()));
 //        // and add the total mesh to the scene
	// 	scene.add(total);
 //        // console.log(JSON.stringify(scene.toJSON()));
	// }

	// function addClouds() {
	// 	var spGeo = new THREE.SphereGeometry(400,30,30);
	// 	var cloudsTexture = THREE.ImageUtils.loadTexture( "assets/images/earth_clouds_1024.png" );
	// 	var materialClouds = new THREE.MeshPhongMaterial( { color: 0xffffff, map: cloudsTexture, transparent:true, opacity:0.3 } );

	// 	meshClouds = new THREE.Mesh( spGeo, materialClouds );
	// 	meshClouds.scale.set( 1.015, 1.015, 1.015 );
	// 	scene.add( meshClouds );
	// }

	function onWindowResize() {
		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize( window.innerWidth, window.innerHeight );
	}

	// render the scene
	function render() {
		var timer = Date.now() * 0.0001;
		camera.position.x = (Math.cos( timer ) *  1800);
		camera.position.z = (Math.sin( timer ) *  1800) ;
		camera.lookAt( scene.position );
		onWindowResize();
		renderer.render( scene, camera );
		requestAnimationFrame( render );
	}
	// }
});

/*;$(function () {
  var titltStyle1 = {
    backgroundColor: '#fff',
    color: '#8414c9'
  }
  var titltStyle2 = {
    borderWidth: 1,
    borderColor : '#fff',
    color: '#fff'
  }
  var titltStyle3 = {
    backgroundColor: 'transparent',
    color: '#ffffff',
  }
  var titltStyle4 = {
    borderWidth: 0,
    borderColor : 'transparent',
    color: '#fff'
  }
  var titltStyle4_1 = {
    borderWidth: 0,
    borderColor : 'transparent',
    color: '#fff',
    padding: [100, 0, 0, 0]
  }
  var txtArray = function(isTrue){
    return [
      {
        value: 12,
        text: [
          '{a|Marketing/AirDrop}',
          '{b|Mining for 100 years, \nwith linear gradient reduction \non mining rewards.}'
        ],
        chartStyle: {
          color: '#109CFE'
        },
        titleStyle: isTrue ? titltStyle1 : titltStyle3
      },
      {
        value: 25,
        text: [
          '{a|Sale}',
          '{b|Used in the first three years \nto promote the activeness \nof the community.}'
        ],
        chartStyle: {
          color: '#4A0494'
        },
        titleStyle: isTrue ? titltStyle2 : titltStyle4
      },
      {
        value: 25,
        text: [
          '{a|Foundation}',
          '{b|Vesting for three years \nto buld aelf ecosystem, \nsupport aelf marketing and sustain \nthe development of aelf project.}'
        ],
        chartStyle: {
          color: '#A011EC'
        },
        titleStyle: isTrue ? titltStyle1 : titltStyle3
      },
      {
        value: 12,
        text: [
          '{a|PoW+PoS}',
          '{b|Mining for 100 years, \nwith linear gradient reduction \non mining rewards.}'
        ],
        chartStyle: {
          color: '#6E08B5'
        },
        titleStyle: isTrue ? titltStyle2 : titltStyle4
      },
      {
        value: 16,
        text: [
          '{a|Team}',
          '{b|Vesting for two years, \nwith the release of equal proportion \nonce every half year.}'
        ],
        chartStyle: {
          color: '#AF67FF'
        },
        titleStyle: isTrue ? titltStyle1 : titltStyle3
      },
      {
        value: 10,
        text: [
          '{a|Advisors+partnership}',
          '{b|Vesting for two years, \nwith the release of equal proportion \nonce every half year.}'
        ],
        chartStyle: {
          color: '#7621E3'
        },
        titleStyle: isTrue ? titltStyle2 : titltStyle4_1
      }
    ]
  }

  var getData = function(isTrue){
    var data = [];
    var arr = txtArray(isTrue);
    for(var i=0; i<=arr.length-1; i++){
      var txt = [];
      if(!isTrue){
        txt.push(arr[i].text[0]);
      }else{
        txt = arr[i].text;
      }
      var obj = {
        value: arr[i].value,
        label: {
          normal: {
            formatter: txt.join('\n'),
            rich: {
              a: arr[i].titleStyle
            }
          }
        },
        itemStyle: {
          normal: arr[i].chartStyle
        }
      };
      data.push(obj);
    }
    return data;
  };

  // 响应式配置 1
  var option1 = {
    series: [{
      radius : '70%',
      label: {
        normal: {
          position: 'outside',
          rich: {
            a: {
              fontSize: 24
            }
          }
        }
      },
      data: getData(false),
      roseType: 'area',
      labelLine: {
        normal: {
          length: 5,
          length2: 20
        }
      }
    }]
  };
  // 响应式配置 2
  var option2 = {
    series: [{
      radius : '90%',
      label: {
        normal: {
          position: 'inside',
          rich: {
            a: {
              fontSize: 12
            }
          }
        }
      },
      data: getData(false),
      roseType: false,
      labelLine: {
        normal: {
          length: 35,
          length2: 0
        }
      }
    }]
  };
  // 默认配置

  var defaultOption = {
    series: [{
      radius : '70%',
      label: {
        normal: {
          position: 'outside',
          rich: {
            a: {
              fontSize: 24
            }
          }
        }
      },
      data: getData(true),
      roseType: 'area',
      labelLine: {
        normal: {
          length: 5,
          length2: 20
        }
      }
    }]
  }
  console.log(defaultOption);


  option = {
    baseOption: {
      backgroundColor: 'transparent',

      title: {
        text: 'Customized Pie',
        left: 'center',
        top: 0
      },
      series : [
        {
          name:'访问来源',
          type:'pie',
          radius : '70%',
          center: ['50%', '50%'],
          roseType: 'area',
          label: {
            normal: {
              rich: {
                fontFamily: 'arial',
                a: {
                  fontSize: 24,
                  padding: 10,
                  borderRadius: 4,
                  fontWeight: 'bold',
                },
                b: {
                  color: '#fff',
                  fontSize: 16,
                  width: '30%',
                  lineHeight: 24,
                  align: 'left',
                  padding: [0, 0, 20, 0]
                }
              }
            }
          },
          labelLine: {
            normal: {
              lineStyle: {
                color: 'rgba(255, 255, 255, 1)'
              },
              smooth: 0.2,
              length: 5,
              length2: 30
            }
          },
          itemStyle: {
            normal: {
              shadowBlur: 200,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          },

          animationType: 'scale',
          animationEasing: 'elasticOut',
          animationDelay: function (idx) {
            return Math.random() * 200;
          }
        }
      ]
    },
    media: [
      {
        query: {
          minWidth: 1200
        },
        option: defaultOption
      },
      {
        query: {
          maxWidth: 1199
        },
        option: option1
      },
      {
        query: {
          maxWidth: 960
        },
        option: option2
      }
    ]
  };
  var myChart = echarts.init(document.getElementById('data-chart'));
  myChart.setOption(option);

  var resizeTime = null;
  $(window).resize(function(){
    resizeTime = setTimeout(function(){
      myChart.resize();
      clearTimeout(resizeTime);
      resizeTime = null;
    }, 100);
  });
})*/
